<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Assignment_01</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <h1>User Form</h1>
  <form id="userForm">
    <div class="form-group">
      <label for="name">Name:</label>
      <input type="text" id="name" name="name">
      <span id="nameError" class="error"></span>
    </div>

    <div class="form-group">
      <label for="age">Age:</label>
      <input type="number" id="age" name="age">
      <span id="ageError" class="error"></span>
    </div>

    <div class="form-group">
      <label for="gender">Gender:</label>
      <select id="gender" name="gender">
        <option value="">Select</option>
        <option value="male">Male</option>
        <option value="female">Female</option>
        <option value="other">Other</option>
      </select>
      <span id="genderError" class="error"></span>
    </div>

    <div class="form-group">
      <label for="address">Address:</label>
      <input type="text" id="address" name="address">
      <span id="addressError" class="error"></span>
    </div>

    <div class="form-group">
      <label for="city">City:</label>
      <input type="text" id="city" name="city">
      <span id="cityError" class="error"></span>
    </div>

    <div class="form-group">
      <label for="state">State:</label>
      <input type="text" id="state" name="state">
      <span id="stateError" class="error"></span>
    </div>

    <div class="form-group">
      <label for="country">Country:</label>
      <input type="text" id="country" name="country">
      <span id="countryError" class="error"></span>
    </div>

    <div class="form-group">
      <label for="phone">Phone Number:</label>
      <input type="text" id="phone" name="phone">
      <span id="phoneError" class="error"></span>
    </div>

    <button type="submit">Submit</button>
  </form>
  <script src="script.js"></script>
</body>
</html>


body {
  font-family: Arial, sans-serif;
  margin: 20px;
}

h1 {
  color: #333;
}

.form-group {
  display: flex;
  align-items: center; /* Aligns all items within the box at the same level */
  border: 1px solid #ccc;
  padding: 10px;
  margin-bottom: 10px;
  border-radius: 5px;
  background-color: #f9f9f9;
}

label {
  width: 150px; /* Ensures all labels align */
  font-weight: bold;
}

input, select {
  flex: 1; /* Ensures inputs expand to fill available space */
  padding: 8px;
}

.error {
  color: red;
  font-size: 0.9em;
  margin-left: 10px;
}

button {
  background-color: #4CAF50;
  color: white;
  padding: 10px 15px;
  border: none;
  cursor: pointer;
  display: block;
  margin-top: 10px;
}

button:hover {
  background-color: #45a049;
}

import React, { useState } from 'react';
import './styles.css';

const App = () => {
  const [formData, setFormData] = useState({
    name: '',
    age: '',
    gender: '',
    address: '',
    city: '',
    state: '',
    country: '',
    phone: '',
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const validateForm = () => {
    const newErrors = {};
    for (const field in formData) {
      if (!formData[field].trim()) {
        newErrors[field] = `${field.charAt(0).toUpperCase() + field.slice(1)} is required`;
      }
    }
    return newErrors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = validateForm();
    setErrors(validationErrors);

    if (Object.keys(validationErrors).length === 0) {
      alert('Form submitted successfully!');
      setFormData({
        name: '',
        age: '',
        gender: '',
        address: '',
        city: '',
        state: '',
        country: '',
        phone: '',
      });
      setErrors({});
    }
  };

  return (
    <div className="form-container">
      <h1>User Form</h1>
      <form onSubmit={handleSubmit}>
        {[
          { label: 'Name', name: 'name', type: 'text' },
          { label: 'Age', name: 'age', type: 'number' },
          {
            label: 'Gender',
            name: 'gender',
            type: 'select',
            options: ['Male', 'Female', 'Other'],
          },
          { label: 'Address', name: 'address', type: 'text' },
          { label: 'City', name: 'city', type: 'text' },
          { label: 'State', name: 'state', type: 'text' },
          { label: 'Country', name: 'country', type: 'text' },
          { label: 'Phone', name: 'phone', type: 'number' },
        ].map(({ label, name, type, options }) => (
          <div className="form-group" key={name}>
            <label htmlFor={name}>{label}:</label>
            {type === 'select' ? (
              <select
                id={name}
                name={name}
                value={formData[name]}
                onChange={handleChange}
              >
                <option value="">Select</option>
                {options.map((option) => (
                  <option key={option} value={option}>
                    {option}
                  </option>
                ))}
              </select>
            ) : (
              <input
                id={name}
                name={name}
                type={type}
                value={formData[name]}
                onChange={handleChange}
              />
            )}
            {errors[name] && <span className="error">{errors[name]}</span>}
          </div>
        ))}
        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default App;
