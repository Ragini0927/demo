import { of } from 'rxjs';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { AgreementsComponent } from './agreements.component';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { AccountSettingsService } from '../../../account-settings.service';
import { UserprofileService } from '../../../userprofile/userprofile.service';

describe('AgreementsComponent - downloadPdf', () => {
	let component: AgreementsComponent;
	let fixture: ComponentFixture<AgreementsComponent>;
	let httpClientSpy: jasmine.SpyObj<any>;

	beforeEach(async () => {
		await TestBed.configureTestingModule({
			declarations: [AgreementsComponent],
			imports: [HttpClientTestingModule],
			providers: [AccountSettingsService, UserprofileService]
		}).compileComponents();

		fixture = TestBed.createComponent(AgreementsComponent);
		component = fixture.componentInstance;
		httpClientSpy = TestBed.inject<any>(HttpClientTestingModule);
		fixture.detectChanges();
	});

	it('should generate and download PDF for privacy', async () => {
		const mockHtml = '<div>{{policyContent}}</div><div>{{contentHeading}}</div>';

		const mockCanvas = document.createElement('canvas');
		Object.defineProperty(mockCanvas, 'width', { value: 800 });
		Object.defineProperty(mockCanvas, 'height', { value: 1000 });
		mockCanvas.getContext('2d'); // ensure it's valid

		// Mock get for HTML template
		spyOn(component['http'], 'get').and.returnValue(of(mockHtml));

		// Mock html2canvas
		const html2canvasSpy = jasmine.createSpy().and.returnValue(Promise.resolve(mockCanvas));
		(html2canvas as any).default = html2canvasSpy;

		// Mock jsPDF instance
		const addImageSpy = jasmine.createSpy('addImage');
		const addPageSpy = jasmine.createSpy('addPage');
		const saveSpy = jasmine.createSpy('save');
		const internalMock = {
			pageSize: {
				getWidth: () => 210,
				getHeight: () => 297
			}
		};

		spyOn(jsPDF.prototype, 'addImage').and.callFake(addImageSpy);
		spyOn(jsPDF.prototype, 'addPage').and.callFake(addPageSpy);
		spyOn(jsPDF.prototype, 'save').and.callFake(saveSpy);
		spyOnProperty(jsPDF.prototype, 'internal', 'get').and.returnValue(internalMock);

		// Mock data
		component.privacyData = ['Mock Privacy Content'];
		component.termsData = ['Mock Terms Content'];
		component.contentPagelabels = {
			privacy: { heading: 'Mock Privacy Heading' },
			terms: { heading: 'Mock Terms Heading' }
		};

		await component.downloadPdf('privacy');

		expect(component['http'].get).toHaveBeenCalledWith('assets/templates/aggrement.html', { responseType: 'text' });
		expect(html2canvasSpy).toHaveBeenCalled();
		expect(addImageSpy).toHaveBeenCalled();
		expect(saveSpy).toHaveBeenCalledWith('PrivacyPolicy.pdf');
	});
});
